plugins {
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

checkstyle {
    toolVersion = '10.10.0'
    configFile = 'config/checkstyle/cs3500-checkstyle.xml' as File
}

application {
    mainModule = 'cs3500.pa05'
    mainClass = 'cs3500.pa05.Driver'
}

// JaCoCo for code coverage
test {
    finalizedBy jacocoTestReport // generate report after code coverage test
}
jacocoTestReport {
    dependsOn test // make sure that test task run before reports are run.
}

group 'cs3500.pa05'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = '20.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    // Jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.0'

    // JavaFX
    implementation 'org.openjfx:javafx-controls:20.0.1'
    implementation 'org.openjfx:javafx-fxml:20.0.1'

    // ControlsFX
    implementation 'org.controlsfx:controlsfx:11.1.2'

    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    // TestFX
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'

    // Mockito and system-stubs
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.0.2'
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
                "Main-Class": "cs3500.pa05.Driver")
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    duplicatesStrategy = 'exclude'
    with jar
}
